
/*!
    MOF descriptions for simple heEventTrace events
    ===============================================

    This mof must get registrered on the target machine by using:

        mofcomp -N:root\wmi heEventTrace.mof

    E.g. during installation (by using the installer)


    Additional hints:
    =================

    List registered providers:
        logman query providers

    Create and start a trace session (named "test")
        logman create trace test -o test.etl -ets -p {DD61CD53-BB41-4b3f-A881-BA7D75DE22E9}

        logman query trace [test]

        logman stop trace test
        logman delete [trace] test

    Create and start seperately
        logman create trace test -o test.etl -p {DD61CD53-BB41-4b3f-A881-BA7D75DE22E9}
        logman start trace test

    Start a logging session (named "test"), by name
        logman start test -p "Haller + Erne Event Trace for Windows Provider" -ets

    Start a logging session (named "test"), using guid ´from file
        logman start test -pf c:\x.guid -ets

    Stop a logging session
        logman stop test -ets



    Copyright (c) 2005  Microsoft Corporation
*/

#pragma classflags( "forceupdate" )
#pragma namespace ( "\\\\.\\Root\\WMI" )


[Dynamic,
 Description("Haller + Erne Event Trace for Windows Provider") : amended,
 Guid("{DD61CD53-BB41-4b3f-A881-BA7D75DE22E9}"),
 locale("MS\\0x409")
]
class heETWProvider:EventTrace
{
};

/*!
    Event Classes are used to logically seperate events into groups (e.g.
    for logically different code components)
    We don't use this for our generic provider at the moment - all events
    are logged into the same class "GenericEvent"

*/
[Dynamic,
 Description("GenericEvents") : amended,
 Guid("{8EC0B600-00C8-485f-B2DA-FB9121D128BA}"),
 DisplayName("GenericEvents") : amended,
 locale("MS\\0x409")
]
class GenericEventClass:heETWProvider
{
};

/*!
    Event Types for the "GenericEventClass".
    We use one event type for each severity level (and we use standard levels),
    but always use the same event data. So we define a single event type with
    multiple EventType values...
*/
[Dynamic,
  Description("Log Event") : amended,
  EventType{0, 1, 2, 3, 4, 5, 6, 7, 0x80},
  EVentTypeName{"None", "Critical", "Fatal", "Error", "Warning", "Information", "Verbose", "Debug", "Userdefined"} : amended,
  DisplayName("Log Event") : amended,
  Version(0),
  locale("MS\\0x409")]
class LogEvent:GenericEventClass
{
    [WmiDataId(1),
     Description("Severity") : amended,
     read]
     uint32  Severity;

    [WmiDataId(2),
     Description("File") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string File;

    [WmiDataId(3),
     Description("Line") : amended,
     read]
     uint32  Line;

    [WmiDataId(4),
     Description("Category") : amended,
     read]
     uint32  Category;

    [WmiDataId(5),
     Description("Message") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string Message;
};



